Overall Flow
~~~~~~~~~~~~

1. Login view
  Gets:
    Username
    Password
    Hostname
  Gets credentials, attempts to connect to broker.
  If connection is successful:
    Add Status message to state (Not to broker)
    Subscribe to channel
    Publish $USER joined channel message to broker.
    Change state.logged_in to true
    Change state.password to empty string

  Else:
    Add connection failure message to state.messages
    Determine type of failure:
      Network Error:
        Add network error message to state.messages
        Try to reconnect for a specified amount of times
          If greater than retries:
            Stop trying to connect
            Display re-try message

      Credential failure:
        Stop trying to connect
        Clear all credentials from state
        Add credential failure message to state.messages
        Prompt for new credentials

      Default failure:
        Clear all credentials from state.
        Stop trying to connect
        Add unspecified error message to state.messages
        console.error the error text.

2. Logged in view
  Box containing chat messages
    Messages:
      Basic format: `${username} - ${timestamp}: ${payload}`
      If message.username === this.state.username:
        Message is Self-styled
      Else:
        Message is Other-styled
  Input box that enables user to publish messages to the broker
  Disconnect button:
    Publishes disconnect Message to broker
    Disconnects



Client instantiates itself
Client connects to broker, gets messages, converts them from JSON to objects,
    which are added to state.messages
Certain actions generate status messages, such as connecting to broker, joining a channel, disconnecting.



Main window
~~~~~~~~~~~
  * Class - Contains state

  * Contains methods that manage state
    * onChange
      * Gets event.target.value and stores it in state.text
    * onSubmit
      * Prevent default
      * Verifies that state.text isn't zero length
      * If verification passes, generates and publishes a JSON
        representation of a SingleMessage

  * Contains mqtt client implementation
    * Right now, the client is a serious of methods attached to MainWindow.  I think I should switch it
      to be a separate class that gains access the the setState, instance variables, etc, by having
      MainWindow passed as a argument to the client generation function.

    * Methods used:
        * onConnect
          * Adds status message to this.state.messages
        * onSubscribe
          * Adds status message to this.state.messages
        * onMessage
          * Converts Buffer object to string, then to JSON, handling errors
          * Converts JSON object to SingleMessage, appends to this.state.messages,
            which re-renders the messageWindow list of messages

  * Contains render method.
    * Render flow control:
      * Messages is an array of objects, each representing a message, meaning they have:
        * Username
        * Timestamp
        * Payload
        * messageID
      props
      The render maps across the array of messages, and in that map call, individual status messages
      are detected and rendered as StatusMessages, rather than SingleMessages

Single message
~~~~~~~~~~~~~~
  * SFC
  * Used by main window
  * Does no validation
  * Deconstructs props into instance variables:
      * Username
      * Timestamp:
        float, rendered into a string representation
      * Payload
      * messageID
  * Renderer
    * Three types of messages:
        * Current user:
          * Right justified
          * Doesn't include name
          * Does include timestamp and payload
        * Status Message:
          * Center justified
          * Text is smaller, less obtrusive
        * Other users:
          * Left justified
          * Includes name, timestamp and payload
          * Name and timestamp is located in a box that's off to the left, in a single column, with payload text in a
            column that takes up the rest of the screen to the right.
    * Messages have a decent amount of vertical margin that forms a visual break between individual messages.
     * From iMessage and Allo, several messages from the same person are grouped together a bit more
       * Get prevMessage and if its username is the same as currentMessage, use this to adjust the margin to be a bit less.
       * Heavily rounded edges, not nearly as sharp as, say, MD's card.
       * Lighter backgrounds, darker messages
       * Message text is white on a darker background




Chat Input
~~~~~~~~~~
  * SFC
  * Takes input,
  * Uses MainWindow.onChange and MainWindow.onSubmit, passed as props
  * Does no validation, that's handled by MainWindow.onSubmit


Get Credentials
~~~~~~~~~~~~~~~

  * SFC
  * Takes input to get username, password, hostname and port
  * takes onChange and onSubmit methods from MainWindow (Which draws it) to supply user-input credentials into
    state.username, state.password, state.hostname, state.port as well as state.credentials_input: bool


Problems
~~~~~~~~
* Constant Socket errors, according to https://stackoverflow.com/questions/45780046/why-reactjs-mqtt-client-url-return-wss
  this is because in a browser, it's in a sandbox, therefore it's converting it to websocket secure mode.  This means that
  my broker must support secure websockets if I want to use it with reactjs.

  In order to do this properly, I'm going to have to have a cert issued by a CA, like let's encrypt.
  This means I'm going to have to have a domain, that I have full control over.
  As of right now I cannot confirm that certbot worked correctly, there was an error message that port 80 wasn't bound correctly.
  Going home to try to fix it via GUI interface

  Alright, turns out that apache was listening on 80, turned it off, ran certbot and the certs are working properly.

  Followed https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-ubuntu-16-04

  Configured mosquitto to require authentication, setup SSL certs, confirmed that it's working via the eclipse
   JS client

   Now that the certs are properly setup, in order to test that my JS client is working, First, I'm going to have to read
   mqtt.js' documentation to figure out how to connect to it via ssl



Going to lunch right now.  Before I left I was working on:
    Writing a chat window component:
      Displays all messages in <Message> format

    Conditional rendering of <Input> component if isConnected === true vs <Login> component if it === false






